#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Author : Samuel
Date   : 20240510

Description: 为了更方便的编写告警相关的脚本, 根据Skylar以前写的 generate_alert_code.py, 重写了这个脚本。
这个脚本先解析配置文件生成告警对象, 然后根据这个告警, 可以实现多种功能。

"""

import json
import sys
import re
import argparse
from datetime import datetime

APP_NAME = 'alert_helper'
APP_VERSION = 'v1.0'


class Alert:
    def __init__(self, vars):
        self.code = vars['code']
        self.name = vars['name']
        self.app = vars['app']
        self.module = vars['module']        
        self.active = vars['active']
        self.type = vars['type']
        self.level = vars['level']
        # print("***Parsed json alert: ", vars['interactive']['zh-CN']['description'])
        self.description = vars['interactive']['zh-CN']['description']
        self.code = int(self.code)

    def __str__(self):        
        return f'{{alert[{self.code:05d}]: {self.app}/{self.module} - {self.name} - {self.description}}}'

    def code_name(self):
        # 将非字母和非数字的字符替换为下划线 _
        code_name = re.sub(r'[^a-zA-Z0-9]', '_', self.name)
        # 在大写字母前插入下划线
        return re.sub(r'([a-z])([A-Z])', r'\1_\2', code_name)

class AlertRosCode:
    ALERT_LEVEL_VALUES = {"none" : 0, "fatal": 1, "critical": 2, "warning": 3, "info": 4}
    ALERT_CODE_DATA_TYPE = "uint32"
    ALERT_LEVEL_DATA_TYPE = "uint8"

    def __init__(self):
        pass 

    def make_split_line(self, name) -> str:
        return f"\n# -----------------------{name}-----------------------\n"

    def make_header(self, version, released):
        txt = f'''
# =================================================================================
# Code generated by Neptune OS tool. DO NOT EDIT.
# =================================================================================
# Neptune OS Alert Definition
# OS Alert Definition: {version} / {released}
# Robot Alert Code Released: {datetime.now()}

'''
        return txt

    def make_alert_levels_define(self, levels = ALERT_LEVEL_VALUES)->str:
        txt = self.make_split_line('Alert Levels') 
        for key,value in levels.items():
            txt += f"{self.ALERT_LEVEL_DATA_TYPE} ALERT_LEVEL_{key.upper():12} = {value}  # level-{key}\n"
        return txt

    def make_alert_modules_define(self, modules)->str:
        txt =  self.make_split_line('Alert Modules') 
        for module in modules:
            txt += f"string ALERT_MODULE_{module.upper():20} = \"{module}\"  \t\t# module {module}\n"
        return txt
    
    def make_alert_code_define(self, alert:Alert)->str:
        txt = f"{self.ALERT_CODE_DATA_TYPE} {alert.app.upper()}_{alert.module.upper()}_{alert.code_name().upper():39} = {alert.code}     # {alert.description}\n"
        return txt

    def make_alert_code_level_define(self, alert:Alert)->str:
        level_name = alert.code_name() + '_LEVEL'
        txt = f"{self.ALERT_LEVEL_DATA_TYPE} {alert.app.upper()}_{alert.module.upper()}_{level_name.upper():40} = {self.ALERT_LEVEL_VALUES[alert.level]}         # {alert.level}\n"
        return txt

class AlertHelper:
    APP_ROBOT = 'robot'


    def __init__(self):
        # app as key
        self._alerts = {}
        self._alert_version = ""
        self._alert_released = ""
        self._alert_modules = {}

    def _load_from_json(self, data)->bool:
        try:
            self._alert_version = data['version']
            self._alert_released = data['released']
            self._alert_modules = data['modules']

            for alert_data in data['alerts']:
                alert = Alert(alert_data)
                if alert.app not in self._alerts:
                    self._alerts[alert.app] = {}
                if alert.module not in self._alerts[alert.app]:
                    self._alerts[alert.app][alert.module] = []
                self._alerts[alert.app][alert.module].append(alert)                
        except Exception as e:
            print("***Parsed json file failed: ", e)
            return False
        return True

    def load(self, path:str)->bool:
        """
        从json文件加载告警
        """
        try:
            with open(path, 'r') as file:
                return self._load_from_json(json.load(file))
        except Exception as e:
            print("***Open file failed: ", e)
            return False        

    def dump(self):
        print("---- Alert Helper ----")
        print("Version  : ", self._alert_version)
        print("Released : ", self._alert_released)
        for app,apps in self._alerts.items():
            print(f"-- {app}")
            for module, modules in apps.items():
                print(f" |- {module}")
                for alert in modules:
                    print(f"   |- {alert}")

    def _get_modules(self, alert_app):
        """
        获取指定app的modules
        """
        if alert_app not in self._alerts:
            return {}
        return self._alerts[alert_app]


    def generate_ros_code(self, app, output) -> bool:
        """
        用来生成ros的消息定义       
        """
        app_modules = []
        if app in self._alert_modules:
            app_modules = self._alert_modules[app]

        alert_modules = self._get_modules(app)
        if not len(alert_modules):
            print(f"***Not app[{app}] in alerts")
            return False

        ros = AlertRosCode()

        alert_count = 0

        with open(output, 'w') as file:
            print("=> Generating alert header...")
            file.write(ros.make_header(self._alert_version, self._alert_released))    
            print("=> Generating alert levels...")
            file.write(ros.make_alert_levels_define())  
            if len(app_modules) > 0:
                print("=> Generating alert modules...")
                file.write(ros.make_alert_modules_define(app_modules))
            
            for module, alerts in alert_modules.items():
                print(f"=> Generating alerts of '{app} - {module}'...")
                file.write(ros.make_split_line(app + '-' + module))
                for alert in alerts:
                    alert_count += 1
                    file.write(ros.make_alert_code_define(alert))
                    file.write(ros.make_alert_code_level_define(alert))
        
        print(f"=> Total {alert_count} alerts generated")
        return True
    

    def generate_test_doc(self, app, output) -> bool:
        """
        用来生成ros的发送测试命令的文档        
        """
        multi_instances = ["lifter", "ledlight", "motor", "depthsensor", "pumpsensor"]
        modules = self._get_modules(app)
        if not len(modules):
            print(f"***Not app[{app}] in alerts")
            return False

        with open(output, 'w') as file:                            
            msg_topic = '/robot/alert'
            msg_type = 'naiad_interfaces/msg/AlertEvent'
            msg_action = '1' # raise
            msg_sequence = 0

            file.write("## Neptune OS Alert Test Scripts\r\n\r\n")
            file.write(f" - Version  : {self._alert_version}\r\n")
            file.write(f" - Released : {self._alert_released}\r\n")
            notes = """
 <font color=red> 注意 </font>

 - 如果需要发送告警解除消息，请自动修改消息体中的 'action'为0

 - 多实例的告警，请自行修改消息体中的 'instance', 如 'lifter/0' 'lifter/1' 

"""
            file.write(notes)

            ## 生成标题
            file.write("\r\n\r\n[TOC]\r\n\r\n")

            for module,alerts in modules.items():
                file.write(f"\r\n\r\n### {app} - {module} \r\n")                
                for alert in alerts:
                    instance = alert.module
                    if alert.module in multi_instances:
                        instance = alert.module + "/0"
                    item = f'''#### {alert.module} - {alert.description} 
```sh

 ros2 topic pub {msg_topic} {msg_type} "{{ code: {alert.code}, sequence : {msg_sequence}, action: {msg_action}, instance: '{instance}', message : '{alert.description}'}}"

```
'''
                    file.write(item)
                    msg_sequence += 1

        print(f"Total {msg_sequence} test scripts generated!")
        return True 



if __name__=="__main__":

    DEFAULT_CONFIG_FILE = 'alert.json'
    DEFAULT_MSG_CODE_FILE = '../msg/AlertCode.msg'
    DEFAULT_TEST_SCRIPT_FILE = '../docs/AlertTestScript.md'

    ## 解析命令行
    parser = argparse.ArgumentParser(description="Neptune OS Alert Helper")

    # 指定配置文件
    parser.add_argument('-c', '--config', nargs=1, metavar='FILE', default=[DEFAULT_CONFIG_FILE], help=f"Specify alert json file(default:{DEFAULT_CONFIG_FILE})")
    # 指定仅调试
    parser.add_argument('-v', '--version', action='store_true', help="Print version")
    parser.add_argument('-r', '--ros-code', nargs='?', const=DEFAULT_MSG_CODE_FILE, metavar='FILE', default=None, help=f"Generate alert codes for ROS(default:{DEFAULT_MSG_CODE_FILE})")    
    parser.add_argument('-t', '--test-doc', nargs='?', const=DEFAULT_TEST_SCRIPT_FILE, metavar='FILE', default=None, help=f"Generate alert test scripts document(default:{DEFAULT_TEST_SCRIPT_FILE})")  

    args = parser.parse_args()

    # 打印版本号
    if args.version:
        print(APP_NAME, APP_VERSION)
        sys.exit(0)

    if args.test_doc:
        helper = AlertHelper()
        if not helper.load(args.config[0]):
            sys.exit(1)
        helper.generate_test_doc(helper.APP_ROBOT, args.test_doc)
        sys.exit(0)

    if args.ros_code:
        helper = AlertHelper()
        if not helper.load(args.config[0]):
            sys.exit(1)
        helper.generate_ros_code(helper.APP_ROBOT, args.ros_code)
        sys.exit(0)

    parser.print_usage()
    sys.exit(1)

