#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Author : Sklar
Date   : 20240418
Version: V0.2.0
Description: 根据云端配置的OS告警协议, 自动生成Robot端的AlertCode.msg定义
    : 只生成Robot的告警码, 其他端的告警不需要

"""

import json
import os
import re
from datetime import datetime

# naiad_interfaces 目录的路径
package_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
# OS Alert Define JSON file path
alert_define_json_file_path = os.path.join(package_path, "script", "alert.json")
# naiad_interface AlertCode.msg file path
alert_code_msg_path = os.path.join(package_path, "docs", "PopupAlert.txt")

DEFINE_APP_ROBOT = "robot"
DEFINE_ROBOT_MODULES =  ["robot", "maincontroller", "lifter", "ledlight", "motor", "encoder", 
                        "fogsensor", "depthsensor", "pumpsensor", "fogbox", "pushbox", 
                        "pumpbox", "powerbox", "algodash", "cyberbot", "robotsystem"]

DEFINE_CODE_DATA_TYPE = "uint32"

DEFINE_LEVEL_DATA_TYPE = "uint8"
# define alert levels
# add 'none' to simplify the codes
DEFINE_ALERT_LEVELS = {"none" : 0, "fatal": 1, "critical": 2, "warning": 3, "info": 4}


def generate_msg_file(json_data, output_file):
    with open(output_file, 'w') as msg_file:
        msg_file.write(f"# =================================================================================\n")      
        msg_file.write(f"# Code generated by Neptune OS tool. DO NOT EDIT.\n")
        msg_file.write(f"# =================================================================================\n")

        msg_file.write(f"# Neptune OS Alert Definition\n")
        version = json_data['version']
        released = json_data['released']
        print("  => Version:", version, "Release Time:", released)
        # V0.2 / 2023-11-27 20:45:01
        msg_file.write(f"# OS Alert Definition: {version} / {released}\n")
        msg_file.write(f"# Robot Alert Code Released: {datetime.now()}\n\n")

        msg_file.write(f"\n# -----------------------Robot Alert Levels-----------------------\n")
        for key,value in DEFINE_ALERT_LEVELS.items():
            msg_file.write(f"{DEFINE_LEVEL_DATA_TYPE} ALERT_LEVEL_{key.upper()} = {value}  # level-{key}\n")

        msg_file.write(f"\n# -----------------------Alert Modules-----------------------\n")
        for module in DEFINE_ROBOT_MODULES:
            msg_file.write(f"string ALERT_MODULE_{module.upper()} = \"{module}\"  # module {module}\n")

        alerts = json_data['alerts']
        # Write alert codes to the msg file
        current_module = ""
        for alert in alerts:
            app = alert['app']
            # 只生成Robot的告警码，其他端的告警不需要
            if app == DEFINE_APP_ROBOT:
                module = alert['module']
                if module not in DEFINE_ROBOT_MODULES:
                    print("###### WARNING! UNSUPPORTED MODULE:", module, ", Discard !")
                else:
                    if current_module != module:
                        current_module = module
                        write_str = f"\n# -----------------------{module}-----------------------"
                        print("  => Write:", write_str)
                        msg_file.write(f"{write_str}\n")
                        
                    # code_name = alert['name'].upper().replace(' ', '_')
                    name = alert['name']
                    level = alert['level']
                    # 将非字母和非数字的字符替换为下划线 _
                    code_name = re.sub(r'[^a-zA-Z0-9]', '_', name)
                    # 在大写字母前插入下划线
                    code_name = re.sub(r'([a-z])([A-Z])', r'\1_\2', code_name)
                    code_value = alert['code']
                    description = alert['interactive']['description']
                    write_str = f"{DEFINE_CODE_DATA_TYPE} {app.upper()}_{module.upper()}_{code_name.upper()} = {code_value}     # {description}"
                    print("  => Write:", write_str)
                    msg_file.write(f"{write_str}\n")
                    # 为了实现不同级别的上报逻辑差异，导入告警级
                    write_str = f"{DEFINE_LEVEL_DATA_TYPE} {app.upper()}_{module.upper()}_{code_name.upper()}_LEVEL = {DEFINE_ALERT_LEVELS[level]}     # {level}"
                    print("  => Write:", write_str)
                    msg_file.write(f"{write_str}\n")




DEFINE_ALL_MODULES =  ["robot", "maincontroller", "lifter", "ledlight", "motor", "encoder", 
                        "fogsensor", "depthsensor", "pumpsensor", "fogbox", "pushbox", 
                        "pumpbox", "powerbox", "algodash", "cyberbot", "robotsystem",
                "rcbox", "powerMonitor", "gps", "plc", "routerMonitor", "rcMonitor",
                "remotectrl"]
MODULE_MAP = {
    "maincontroller": "主控盒",
    "powerbox": "电源盒",
    "fogbox": "FOG盒",
    "fogsensor": "FOG盒",
    "pumpbox": "泵压盒",
    "pumpsensor": "泵压盒",
    "pushbox": "顶出盒",
    "lifter/0": "左黄水相机",
    "lifter/1": "右黄水相机",
    "ledlight/0": "前清水相机",
    "ledlight/1": "后清水相机",
    "encoder": "小轮",
    "motor": "驱动轮",
    "depthsensor": "深度传感器",
    "algodash": "软件",
    "cyberbot": "软件",
    "robotsystem": "软件",
    "robot": "机器人",
    "rcbox": "遥控箱",
    "powerMonitor": "遥控箱",
    "gps": "遥控箱",
    "routerMonitor": "遥控箱",
    "rcMonitor": "遥控箱",
    "plc": "线缆",
    "remotectrl": "遥控器",
}

def is_popup(level):
    if level == "critical" or level == "fatal":
        return True
    else:
        return False


def print_popup_alert(json_data, output_file):
    with open(output_file, 'w') as msg_file:
        msg_file.write(f"# =================================================================================\n")      
        msg_file.write(f"# Code generated by Neptune OS tool. DO NOT EDIT.\n")
        msg_file.write(f"# =================================================================================\n")

        msg_file.write(f"设备故障,请检查:\n")

        alerts = json_data['alerts']
        # Write alert codes to the msg file
        current_module = ""

        for module in DEFINE_ALL_MODULES:
            if module == "lifter":
                module_name = ["左", "右"]
                for name in module_name:
                    msg_file.write(f"{name}黄水相机:\n")
                    for alert in alerts:
                        if alert['module'] != module:
                            continue
                        app = alert['app']
                        level = alert['level']
                        main_title = alert['interactive']['mainTitle']
                        sub_title = alert['interactive']['subTitle']
                        if not is_popup(level):
                            msg_file.write(f"{name}舵机{main_title},{sub_title}\n")
            elif module == "ledlight":
                module_name = ["前", "后"]
                for name in module_name:
                    msg_file.write(f"{name}清水相机:\n")
                    for alert in alerts:
                        if alert['module'] != module:
                            continue
                        app = alert['app']
                        level = alert['level']
                        main_title = alert['interactive']['mainTitle']
                        sub_title = alert['interactive']['subTitle']
                        if not is_popup(level):
                            msg_file.write(f"{name}LED{main_title},{sub_title}\n")
            elif module == "encoder":
                module_name = ["左", "右"]
                for name in module_name:
                    msg_file.write(f"{name}小轮:\n")
                    for alert in alerts:
                        if alert['module'] != module:
                            continue
                        app = alert['app']
                        level = alert['level']
                        main_title = alert['interactive']['mainTitle']
                        sub_title = alert['interactive']['subTitle']
                        if not is_popup(level):
                            msg_file.write(f"{name}小轮{main_title},{sub_title}\n")
            elif module == "motor":
                module_name = ["左", "右", "前", "转向"]
                for name in module_name:
                    msg_file.write(f"{name}电机:\n")
                    for alert in alerts:
                        if alert['module'] != module:
                            continue
                        app = alert['app']
                        level = alert['level']
                        main_title = alert['interactive']['mainTitle']
                        sub_title = alert['interactive']['subTitle']
                        if not is_popup(level):
                            msg_file.write(f"{name}电机{main_title},{sub_title}\n")
            elif module == "pumpsensor":
                msg_file.write(f"泵压盒:\n")
                module_name = ["中", "左", "右"]
                for name in module_name:
                    for alert in alerts:
                        if alert['module'] != module:
                            continue
                        app = alert['app']
                        level = alert['level']
                        main_title = alert['interactive']['mainTitle']
                        sub_title = alert['interactive']['subTitle']
                        if not is_popup(level):
                            msg_file.write(f"{name}泵压传感器{main_title},{sub_title}\n")

            else:
                name = MODULE_MAP[module]
                msg_file.write(f"{name}:\n")
                for alert in alerts:
                    if alert['module'] != module:
                            continue
                    app = alert['app']
                    level = alert['level']
                    main_title = alert['interactive']['mainTitle']
                    sub_title = alert['interactive']['subTitle']
                    if not is_popup(level):
                        msg_file.write(f"{main_title},{sub_title}\n")
            msg_file.write(f"\n")
                




if __name__ == "__main__":
    if not os.path.exists(alert_define_json_file_path):
        print(f"###### ERROR! OS Alert Define Json File not found: {alert_define_json_file_path}")
        exit(1)

    print("=> Read OS Alert Define Json...")
    with open(alert_define_json_file_path, 'r') as json_file:
        json_data = json.load(json_file)
    
    if not os.path.exists(alert_code_msg_path):
        print(f"###### WARNING! AlertCode.msg File not found: {alert_code_msg_path}")
        print("=> Creating the file...")
        open(alert_code_msg_path, 'w').close()

    print("=> Generate AlertCode.msg File... ")
    print_popup_alert(json_data, alert_code_msg_path)
    print("<< done")
